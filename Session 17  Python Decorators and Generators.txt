Session 17: Python Decorators and Generators
------------------------------------------------------------

1) Introduction:
   • **Decorator** → A function that modifies another function.
   • **Generator** → A function that returns an iterator using `yield`.
   • Both help write efficient and reusable code.

------------------------------------------------------------

2) Decorators:
   • Decorators allow adding functionality to existing functions without modifying them.

   Example:
   def greet(func):
       def wrapper():
           print("Hello")
           func()
       return wrapper

   @greet
   def say_name():
       print("Yash")

   say_name()

   Output:
   Hello
   Yash

------------------------------------------------------------

3) Decorator Without @ Symbol:
   Example:
   def greet(func):
       def wrapper():
           print("Hello")
           func()
       return wrapper

   def say_name():
       print("Yash")

   decorated = greet(say_name)
   decorated()

   Output:
   Hello
   Yash

------------------------------------------------------------

4) Decorator with Arguments:
   Example:
   def decorator(func):
       def wrapper(name):
           print("Before function call")
           func(name)
           print("After function call")
       return wrapper

   @decorator
   def greet(name):
       print("Hello", name)

   greet("Ravi")

   Output:
   Before function call
   Hello Ravi
   After function call

------------------------------------------------------------

5) Generators:
   • Generator functions return values one at a time using `yield`.
   • Useful for large data sets (memory efficient).

   Example:
   def my_generator():
       for i in range(5):
           yield i

   for val in my_generator():
       print(val)

   Output:
   0
   1
   2
   3
   4

------------------------------------------------------------

6) Generator with next():
   gen = my_generator()
   print(next(gen))  # 0
   print(next(gen))  # 1
   print(next(gen))  # 2

------------------------------------------------------------

7) Practical Example (Even Numbers Generator):
   def even_numbers(n):
       for i in range(n):
           if i % 2 == 0:
               yield i

   for num in even_numbers(10):
       print(num)

   Output:
   0
   2
   4
   6
   8

------------------------------------------------------------

8) Combining Decorators and Generators:
   def decorator(func):
       def wrapper(*args, **kwargs):
           print("Start")
           result = func(*args, **kwargs)
           print("End")
           return result
       return wrapper

   @decorator
   def gen_numbers(n):
       for i in range(n):
           yield i

   for num in gen_numbers(3):
       print(num)

   Output:
   Start
   0
   1
   2
   End

------------------------------------------------------------
End of Session 17
Next Session → Python Lambda, Map, Filter, Reduce
------------------------------------------------------------
